<?xml version="1.0" encoding="utf-8"?>
<doc>
  <method name="IsMatch">
    <summary>
      Indicates whether the regex matches the given subject.
    </summary>
  </method>

  <method name="Match">
    <summary>
      Matches the regex against the given subject.
    </summary>
  </method>

  <method name="Matches">
    <summary>
      Returns an enumerable of all matches found in the given subject.
    </summary>
  </method>

  <method name="Replace">
    <summary>
      Replaces matches found in the given subject string, using the
      <b>PCRE.NET replacement syntax</b>
      (similar to the one used by the
      <see cref="System.Text.RegularExpressions.Regex"/>
      class).
    </summary>
  </method>

  <method name="Substitute">
    <summary>
      Replaces matches found in the given subject string, using the <b>PCRE2 replacement syntax</b>.
    </summary>
  </method>

  <method name="Split">
    <summary>
      Splits a subject string into a sequence of substrings that occur between the matches.
    </summary>
  </method>

  <method name="DfaMatch">
    <summary>
      Matches the regex against the given subject using the DFA algorithm.
    </summary>
  </method>

  <method name="DfaMatches">
    <summary>
      Returns an enumerable of all matches found in the given subject, using the DFA algorithm.
    </summary>
  </method>

  <!-- Keep the parameters ordered as they appear in the method signatures -->

  <param name="subject">The subject string to be matched.</param>
  <param name="pattern">The regular expression pattern.</param>
  <param name="replacement">The replacement string.</param>
  <param name="replacementFunc">A function called for each match that provides the replacement string.</param>
  <param name="count">The maximum number of matches to attempt.</param>
  <param name="startIndex">The index at which the match should be attempted.</param>
  <param name="options">Additional options.</param>
  <param name="patternOptions">Additional options for the pattern.</param>
  <param name="substituteOptions">Additional options for the substitution.</param>
  <param name="splitOptions">Additional options for the split.</param>
  <param name="onCallout">A function to be called when a callout point is reached during the match.</param>
  <param name="onMatchCallout">A function to be called when a callout point is reached during the match.</param>
  <param name="onSubstituteCallout">A function to be called when a substitution is made.</param>
  <param name="onSubstituteCaseCallout">A function to be called when a case substitution is made.</param>
  <param name="settings">Additional advanced settings.</param>

  <!-- Keep the remarks ordered by importance -->

  <remarks name="dfaMatch">
    <para>
      The returned result represents all matches starting at the same index.
    </para>
  </remarks>

  <remarks name="dfaMatches">
    <para>
      The returned result is a sequence of match results starting at different points in the subject string.
      Each item represents several matches starting at the same index in the subject string.
    </para>
  </remarks>

  <remarks name="static">
    <para>
      Note that using a static matching method is not efficient. For best performance,
      create a
      <see cref="PcreRegex"/>
      object and use its instance methods.
    </para>
  </remarks>

  <remarks name="replacementString">
    <para>
      The supported placeholders in the replacement string are similar to those supported by the
      <see cref="System.Text.RegularExpressions.Regex"/>
      class:
      <list type="bullet">
        <item>
          <c>$n</c>
          - The value of the capture group at index <c>n</c>.
        </item>
        <item>
          <c>${name}</c>
          - The value of the named capture group.
        </item>
        <item>
          <c>$&amp;</c>
          - The value of the full match. Equivalent to <c>$0</c>.
        </item>
        <item>
          <c>$_</c>
          - The full subject string.
        </item>
        <item>
          <c>$`</c>
          - The part of the subject string appearing before the match.
        </item>
        <item>
          <c>$'</c>
          - The part of the subject string appearing after the match.
        </item>
        <item>
          <c>$+</c>
          - The value of the last matched capture group.
        </item>
        <item>
          <c>$$</c>
          - A literal dollar sign.
        </item>
      </list>
    </para>
  </remarks>

  <remarks name="replacementStringPcre2">
    <para>
      The supported placeholders in the replacement string are specific to the PCRE2 library.
      <list type="bullet">
        <item>
          <c>$n</c>
          - The value of the capture group <c>n</c> (by index or name).
        </item>
        <item>
          <c>${n}</c>
          - The value of the capture group <c>n</c> (by index or name).
        </item>
        <item>
          <c>$$</c>
          - A literal dollar sign.
        </item>
        <item>
          <c>$*MARK</c>
          or
          <c>${*MARK}</c>
          - The last encountered backtracking control verb name.
        </item>
      </list>
      When the option
      <see cref="PcreSubstituteOptions.SubstituteExtended"/>
      is enabled, additional syntax is available:
      <list type="bullet">
        <item>
          Backslash in a replacement string is interpreted as an escape character.
          The usual forms such as <c>\x{ddd}</c> can be used to specify particular character codes, and backslash
          followed by any non-alphanumeric character quotes that character.
          Extended quoting can be coded using <c>\Q...\E</c>, exactly as in pattern strings.
        </item>
        <item>
          Case forcing: <c>\U</c> and <c>\L</c> change to upper or lower case forcing, respectively,
          and <c>\E</c> (when not terminating a <c>\Q</c> quoted sequence) reverts to no case forcing.
          The sequences <c>\u</c> and <c>\l</c> force the next character (if it is a letter) to upper
          or lower case, respectively, and then the state automatically reverts to no case forcing.
          However, if <c>\u</c> is immediately followed by <c>\L</c> or <c>\l</c> is immediately followed by <c>\U</c>,
          the next character's case is forced by the first escape sequence, and subsequent characters by the second.
          This provides a "title casing" facility that can be applied to group captures.
        </item>
        <item>
          <c>${n:-string}</c>
          - If group <c>n</c> is set, its value is inserted;
          if not, the string is expanded and the result inserted.
          This is a shorthand for <c>${n:+${n}:string}</c>.
        </item>
        <item>
          <c>${n:+string1:string2}</c>
          - Strings that are expanded and inserted when group <c>n</c> is set or unset, respectively.
        </item>
      </list>
    </para>
  </remarks>

  <remarks name="callout">
    <para>
      Within a regular expression, <c>(?C&lt;arg&gt;)</c> indicates a point at which the external function is to be
      called.
      Different callout points can be identified by putting a number less than 256 after the letter C. The default value
      is zero.
      Alternatively, the argument may be a delimited string. The starting delimiter must be one of
      <c>` ' " ^ % # $ {</c>
      and the ending delimiter is the same as the start, except for <c>{</c>, where the ending delimiter is <c>}</c>.
      If the
      <see cref="PcreOptions.AutoCallout"/>
      option bit is set when a pattern is compiled, PCRE2 automatically inserts callouts,
      all with number 255, before each item in the pattern except for immediately before or after an explicit callout.
    </para>
  </remarks>

  <remarks name="startIndex">
    <para>
      Passing a non-zero
      <paramref name="startIndex"/>
      differs from passing a shortened string if the pattern
      starts with an assertion (such as <c>\b</c>) or contains lookbehinds.
    </para>
  </remarks>

</doc>
