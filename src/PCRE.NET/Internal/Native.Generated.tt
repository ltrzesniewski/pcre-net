<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

var funcs = ParseFuncs(@"
    int get_error_message(int errorCode, char* errorBuffer, uint bufferSize);
    void compile(ref compile_input input, out compile_result result);
    void code_free(IntPtr code);
    int pattern_info(IntPtr code, uint key, void* data);
    int config(uint key, void* data);
    void match(ref match_input input, out match_result result);
    void dfa_match(ref dfa_match_input input, out match_result result);
    uint get_callout_count(IntPtr code);
    void get_callouts(IntPtr code, pcre2_callout_enumerate_block* data);
    IntPtr jit_stack_create(uint startSize, uint maxSize);
    void jit_stack_free(IntPtr stack);
    int convert(ref convert_input input, out convert_result result);
    int convert_result_free(char* str);
").ToList();

var platforms = new[] {
    new PlatformDef("Win", "PCRE.NET.Native.dll"),
    new PlatformDef("Win32", "PCRE.NET.Native.x86.dll"),
    new PlatformDef("Win64", "PCRE.NET.Native.x64.dll"),
    new PlatformDef("Linux", "PCRE.NET.Native.so"),
    new PlatformDef("OSX", "PCRE.NET.Native.dylib")
};

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using System.Security;

namespace PCRE.Internal
{
    unsafe partial class Native
    {
<# foreach (var func in funcs) { #>
        public static <#= func.Declaration #>
            => _impl.<#= func.Name #>(<#= string.Join(", ", func.Parameters.Select(p => $"{p.Modifier}{p.Name}")) #>);

<# } #>
        private abstract class LibImpl
        {
<# foreach (var func in funcs) { #>
            public abstract <#= func.Declaration #>;
<# } #>
        }

<# foreach (var platform in platforms) { #>
        [SuppressUnmanagedCodeSecurity]
        private class <#= platform.Name #>Impl : LibImpl
        {
<# foreach (var func in funcs) { #>
            public override <#= func.Declaration #>
                => pcrenet_<#= func.Name #>(<#= string.Join(", ", func.Parameters.Select(p => $"{p.Modifier}{p.Name}")) #>);

            [DllImport("<#= platform.LibName #>", CallingConvention = CallingConvention.Cdecl)]
            private static extern <#= func.ReturnType #> pcrenet_<#= func.Name #>(<#= string.Join(", ", func.Parameters.Select(p => p.GetPInvokeAttributes() + p.Declaration)) #>);

<# } #>
        }

<# } #>
    }
}
<#+

private IEnumerable<FuncDef> ParseFuncs(string funcs)
{
    var funcsRe = new Regex(
        @"
            \G \s*
            (?<returnType>\S+) \s+ (?<funcName>\w+) \s* \(
            (?: \s*
                (?<paramModifier> (?: (?:in|ref|out) \s+)? )
                (?<paramType>\S+) \s+ (?<paramName>\w+) \s*
                (?(?=,),|(?=\)))
            )*
            \) \s* ;
        ",
        RegexOptions.IgnorePatternWhitespace | RegexOptions.CultureInvariant
    );

    foreach (Match match in funcsRe.Matches(funcs))
    {
        var def = new FuncDef
        {
            ReturnType = match.Groups["returnType"].Value,
            Name = match.Groups["funcName"].Value
        };

        var paramTypes = match.Groups["paramType"].Captures.Cast<Capture>().Select(i => i.Value).ToList();
        var paramNames = match.Groups["paramName"].Captures.Cast<Capture>().Select(i => i.Value).ToList();
        var paramModifiers = match.Groups["paramModifier"].Captures.Cast<Capture>().Select(i => i.Value).ToList();

        for (var i = 0; i < paramNames.Count; ++i)
        {
            def.Parameters.Add(new FuncParamDef
            {
                Type = paramTypes[i],
                Name = paramNames[i],
                Modifier = paramModifiers[i]
            });
        }

        yield return def;
    }
}

private class FuncDef
{
    public string ReturnType;
    public string Name;
    public readonly List<FuncParamDef> Parameters = new();

    public string Declaration => $"{ReturnType} {Name}({ParametersDeclaration})";
    public string ParametersDeclaration => string.Join(", ", Parameters.Select(p => p.Declaration));
}

private class FuncParamDef
{
    public string Type;
    public string Name;
    public string Modifier;

    public string Declaration => $"{Modifier}{Type} {Name}";

    public string GetPInvokeAttributes()
    {
        switch (Type)
        {
            case "string":
                return "[In, MarshalAs(UnmanagedType.LPStr)] ";

            default:
                return string.Empty;
        }
    }
}

private class PlatformDef
{
    public readonly string Name;
    public readonly string LibName;

    public PlatformDef(string name, string libName)
    {
        Name = name;
        LibName = libName;
    }
}

#>
