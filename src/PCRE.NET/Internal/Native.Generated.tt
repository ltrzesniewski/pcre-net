<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

var functions = ParseFunctions(
    """
    int get_error_message(int errorCode, char* errorBuffer, uint bufferSize) no-gc;
    void compile(compile_input* input, compile_result* result);
    void code_free(IntPtr code);
    int pattern_info(IntPtr code, uint key, void* data) no-gc;
    int config(uint key, void* data) no-gc;
    void match(match_input* input, match_result* result);
    void buffer_match(buffer_match_input* input, match_result* result);
    void dfa_match(dfa_match_input* input, match_result* result);
    IntPtr create_match_buffer(match_buffer_info* info);
    void free_match_buffer(IntPtr buffer);
    uint get_callout_count(IntPtr code) no-gc;
    void get_callouts(IntPtr code, pcre2_callout_enumerate_block* data) no-gc;
    IntPtr jit_stack_create(uint startSize, uint maxSize);
    void jit_stack_free(IntPtr stack);
    int convert(convert_input* input, convert_result* result);
    void convert_result_free(char* str);
    """
).ToList();

const string libName = "PCRE.NET.Native";

var platforms = new[] {
    new PlatformDef("Win", libName + ".dll"),
    new PlatformDef("Win32", libName + ".x86.dll"),
    new PlatformDef("Win64", libName + ".x64.dll"),
    new PlatformDef("Linux", libName + ".so"),
    new PlatformDef("OSX", libName + ".dylib")
};

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using System.Security;

#nullable enable

namespace PCRE.Internal;

unsafe partial class Native
{
#if NETCOREAPP

<# foreach (var func in functions) { #>
<# if (func.SuppressGCTransition) { #>
    [SuppressGCTransition]
<# } #>
    [DllImport("<#= libName #>", EntryPoint = "pcrenet_<#= func.Name #>", CallingConvention = CallingConvention.Cdecl)]
    public static extern <#= func.ReturnType #> <#= func.Name #>(<#= string.Join(", ", func.Parameters.Select(p => p.GetPInvokeAttributes() + p.Declaration)) #>);

<# } #>
#else

<# foreach (var func in functions) { #>
    public static <#= func.Declaration #>
        => _impl.<#= func.Name #>(<#= string.Join(", ", func.Parameters.Select(p => $"{p.Modifier}{p.Name}")) #>);

<# } #>
    private abstract class LibImpl
    {
<# foreach (var func in functions) { #>
        public abstract <#= func.Declaration #>;
<# } #>
    }

<# foreach (var platform in platforms) { #>
    [SuppressUnmanagedCodeSecurity]
    private sealed class <#= platform.Name #>Impl : LibImpl
    {
<# foreach (var func in functions) { #>
        public override <#= func.Declaration #>
            => pcrenet_<#= func.Name #>(<#= string.Join(", ", func.Parameters.Select(p => $"{p.Modifier}{p.Name}")) #>);

        [DllImport("<#= platform.LibName #>", CallingConvention = CallingConvention.Cdecl)]
        private static extern <#= func.ReturnType #> pcrenet_<#= func.Name #>(<#= string.Join(", ", func.Parameters.Select(p => p.GetPInvokeAttributes() + p.Declaration)) #>);

<# } #>
    }

<# } #>
#endif
}
<#+

private static IEnumerable<FuncDef> ParseFunctions(string functions)
{
    var functionsRe = new Regex(
        """
        \G \s*
        (?<returnType>\S+) \s+ (?<funcName>\w+) \s* \(
        (?: \s*
            (?<paramModifier> (?: (?:in|ref|out) \s+)? )
            (?<paramType>\S+) \s+ (?<paramName>\w+) \s*
            (?(?=,),|(?=\)))
        )*
        \) \s*
        (?<nogc>no-gc)?
        \s* ;
        """,
        RegexOptions.IgnorePatternWhitespace | RegexOptions.CultureInvariant
    );

    foreach (Match match in functionsRe.Matches(functions))
    {
        var def = new FuncDef
        {
            ReturnType = match.Groups["returnType"].Value,
            Name = match.Groups["funcName"].Value,
            SuppressGCTransition = match.Groups["nogc"].Success
        };

        var paramTypes = match.Groups["paramType"].Captures.Cast<Capture>().Select(i => i.Value).ToList();
        var paramNames = match.Groups["paramName"].Captures.Cast<Capture>().Select(i => i.Value).ToList();
        var paramModifiers = match.Groups["paramModifier"].Captures.Cast<Capture>().Select(i => i.Value).ToList();

        for (var i = 0; i < paramNames.Count; ++i)
        {
            def.Parameters.Add(new FuncParamDef
            {
                Type = paramTypes[i],
                Name = paramNames[i],
                Modifier = paramModifiers[i]
            });
        }

        yield return def;
    }
}

private class FuncDef
{
    public string ReturnType;
    public string Name;
    public readonly List<FuncParamDef> Parameters = new();
    public bool SuppressGCTransition;

    public string Declaration => $"{ReturnType} {Name}({ParametersDeclaration})";
    public string ParametersDeclaration => string.Join(", ", Parameters.Select(p => p.Declaration));
}

private class FuncParamDef
{
    public string Type;
    public string Name;
    public string Modifier;

    public string Declaration => $"{Modifier}{Type} {Name}";

    public string GetPInvokeAttributes()
    {
        switch (Type)
        {
            case "string":
                return "[In, MarshalAs(UnmanagedType.LPStr)] ";

            default:
                return string.Empty;
        }
    }
}

private class PlatformDef(string name, string libName)
{
    public readonly string Name = name;
    public readonly string LibName = libName;
}

#>
