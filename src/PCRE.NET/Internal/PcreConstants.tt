<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var commentRe = new Regex(
        @"/\* .*? \*/",
        RegexOptions.CultureInvariant | RegexOptions.IgnorePatternWhitespace
    );

    var defineRe = new Regex(
        @"
        ^ \s* \# \s* define \s+
        PCRE2_(?<name>\w+) \s+
        \(? \s*
        (?<value> -? (?:0x)? [0-9]+ )
        [uU]?
        \s* \)?
        \s* $
        ",
        RegexOptions.CultureInvariant | RegexOptions.IgnorePatternWhitespace | RegexOptions.Multiline
    );

    var toIgnore = new HashSet<string>
    {
        "MAJOR", "MINOR", "LOCAL_WIDTH"
    };

    var constants = new List<(string type, string name, string value)>();

    foreach (var fileLine in File.ReadLines(Host.ResolvePath("../../PCRE/src/pcre2.h")))
    {
        if (fileLine.IndexOf("Obsolete", StringComparison.OrdinalIgnoreCase) >= 0)
            continue;

        var line = commentRe.Replace(fileLine, string.Empty);
        var m = defineRe.Match(line);

        if (!m.Success)
            continue;

        var (name, value) = (m.Groups["name"].Value, m.Groups["value"].Value);

        if (name.StartsWith("HAVE_"))
            continue;

        if (toIgnore.Contains(name))
            continue;

        var type = name.StartsWith("ERROR_") ? "int" : "uint";

        constants.Add((type, name, value));
    }
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PCRE.Internal
{
    internal static class PcreConstants
    {
<#
    foreach (var (type, name, value) in constants)
    {
#>
        public const <#= type #> <#= name #> = <#= value #>;
<#
    }
#>
    }
}
